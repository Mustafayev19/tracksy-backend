// schema.prisma (SON VERSİYA)

generator client {
  provider     = "prisma-client-js"
output   = "../generated/prisma" 
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  password        String
  profileImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            String   @default("user")

  projects   Project[]
  tasks      Task[]
  activities ActivityLog[]
}

model Project {
  id             Int       @id @default(autoincrement())
  name           String
  color          String?
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isCompleted    Boolean   @default(false)
  completedAt    DateTime?
  deadline       DateTime?
  totalTimeSpent Int?      @default(0)

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
}

// FAYL: prisma/schema.prisma

model Task {
  id             Int          @id @default(autoincrement())
  title          String
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  status         TaskStatus   @default(TODO)
  priority       TaskPriority @default(MEDIUM)
  projectId      Int
  userId         Int
  parentId       Int?
  position       Int?
  dueDate        DateTime?
  completedAt    DateTime?
  totalTimeSpent Int?         @default(0)

  // --- YENİ ƏLAVƏ OLUNAN SAHƏLƏR (Taymer üçün) ---
  startTime      DateTime?
  endTime        DateTime?

  user     User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent   Task?    @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children Task[]   @relation("TaskHierarchy")
  activities ActivityLog[]
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  type      String
  userId    Int
  taskId    Int?
  details   Json?
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)
}